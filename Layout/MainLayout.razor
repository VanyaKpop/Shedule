@inherits LayoutComponentBase
@inject IGetterService Getter

<div class="header">
		<EditForm Model="@this" OnSubmit="Submit">
		@*<DataAnnotationsValidator />
		<ValidationSummary />*@
			<p>
				<InputNumber class="Input remove-border" @bind-Value="Week" placeholder = "Введи номер недели"/>
			</p>
			<input type="submit" hidden />
		</EditForm>
	
		<p>
			Выбрана неделя @week
		</p>

</div>

<div class="main row" style="white-space: pre-line">
	<div class="container">
		<p class="pd-1 bord">Выбрана неделя @week</p>
		<EditForm Model="@this" OnSubmit="Submit" class="test">
			<p class="pd-3">
				<InputNumber class="Input remove-border" @bind-Value="Week" placeholder = "Введи номер недели"/>
			</p>
			<input type="submit" hidden />
		</EditForm>
	</div>
</div>


@Body

@code {

	public int? Week { get; set; }

	EditContext? editContext;

	private Timer? timer;
	private DateTime Time = DateTime.Now;

	private int? week { get; set; } 

	void Submit()
	{
		Getter.SetWeek(Week);
	}

	protected override async Task OnInitializedAsync()
	{
		await base.OnInitializedAsync();

		timer = new Timer(Bruh, new System.Threading.AutoResetEvent(false), 1000, 1000);
	}

	async void Bruh(object stateInfo)
	{
		week = Getter.GetWeek();
		await InvokeAsync(StateHasChanged);
	}

}

@*
	css isolation doesn't work for blazor components or Tag Helpers. use <style> instead
*@

<style> 
	.remove-border.modified.valid {
		outline: none;
	}
	.Input {
		outline: none;
		border-inline: none;
		background-color: transparent;
		border-bottom: 0.2rem solid rgb(0, 0, 0);
		border-top: none;
	}

	.Input::placeholder {
		color: #212529;
		opacity: 0.4;
	}

	input[type="number"]::-webkit-inner-spin-button, input[type="number"]::-webkit-outer-spin-button {
		-webkit-appearance: none;
		margin: 0;
	}

	input[type="number"] {
		-moz-appearance: textfield;
	}
</style>