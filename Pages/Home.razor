@page "/"
@inject IGetterService Getter
<PageTitle>Home</PageTitle>

<div class="main row" style="white-space: pre-line">
		<div class="container">
			<p class="pd-1">Понедельник</p>
			<p class="pd-3">@Monday</p>
		</div>
		<div class="container">
			<p class="pd-1">Вторник</p>
			<p class="pd-3">@Tuesday</p>
		</div>
		<div class="container">
			<p class="pd-1">Среда</p>
			<p class="pd-3">@Wednesday</p>
		</div>
	</div>

<div class="main row" style="white-space: pre-line">
		<div class="container">
			<p class="pd-1">Четверг</p>
			<p class ="pd-3">@Thursday</p>
		</div>
		<div class="container">
			<p class="pd-1">Пятница</p>
			<p class="pd-3">@Friday</p>
		</div>
		<div class="container">
			<p class="pd-1">Суббота</p>
			<p class="pd-3">@Saturday</p>
		</div>
	</div>

	<div class="footer">
	</div>

@code{
	private string? Monday { get; set; }
	private string? Tuesday { get; set; }
	private string? Wednesday { get; set; }
	private string? Thursday { get; set; }
	private string? Friday { get; set; }
	private string? Saturday { get; set; }

	private static DateTime Date = new(2024, 1, 1, DateTime.Now.Hour, DateTime.Now.Minute, DateTime.Now.Second);

	private int week = GetIso8601WeekOfYear(Date);

	private HttpClient httpClient = new HttpClient();

	private Timer? timer;
	private DateTime Time = DateTime.Now;

	protected override async Task OnInitializedAsync()
	{
		await base.OnInitializedAsync();

		Getter.SetWeek(week);

		timer = new Timer(Bruh, new System.Threading.AutoResetEvent(false), 1000, 1000);
	}

	public static int GetIso8601WeekOfYear(DateTime time)
	{
		// Seriously cheat.  If its Monday, Tuesday or Wednesday, then it'll
		// be the same week# as whatever Thursday, Friday or Saturday are,
		// and we always get those right
		DayOfWeek day = CultureInfo.InvariantCulture.Calendar.GetDayOfWeek(time);
		if (day >= DayOfWeek.Monday && day <= DayOfWeek.Wednesday)
		{
			time = time.AddDays(3);
		}

		// Return the week of our adjusted day
		return CultureInfo.InvariantCulture.Calendar.GetWeekOfYear(time, CalendarWeekRule.FirstFourDayWeek, DayOfWeek.Monday);
	}

	async void Bruh(object stateInfo)
	{
		Time = DateTime.Now;

		Monday = await Getter.GetLesson("monday");
		Tuesday = await Getter.GetLesson("tuesday");
		Wednesday = await Getter.GetLesson("wednesday");
		Thursday = await Getter.GetLesson("thursday");
		Friday = await Getter.GetLesson("friday");
		Saturday = await Getter.GetLesson("saturday");

		await InvokeAsync(StateHasChanged);
	}
}